Microsoft (R) Macro Assembler Version 14.26.28805.0	    05/31/20 23:15:25
-Portfolio Project     (program6_leflangj.asm		     Page 1 - 1


				TITLE Portfolio Project     (program6_leflangj.asm)

				; Author: James Leflang
				; Last Modified: 05/30/2020
				; OSU email address: leflangj@oregonstate.edu
				; Course number/section: CS-271-400
				; Project Number: 6               Due Date: 06/07/2020
				; Description:

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			ARRAYSIZE EQU 10

				;--------------------------------------
				getString MACRO bufferaddr, buffertyp, bufsize, prompt
				; Gets an input string to return the input in buffer.
				; Avoid passing arguments in edx, ecx, eax.
				;--------------------------------------
					push	edx
					push	ecx
					push	eax

					mov		edx, prompt
					call	WriteString

					mov		edx, bufferaddr
					mov		ecx, buffertyp
					call	ReadString

					mov		[bufsize], eax

					pop		eax
					pop		ecx
					pop		edx

				ENDM

				;--------------------------------------
				displayString MACRO outputVal
				; Takes a value and outputs it as a string to console.
				; Avoid passing arguements in edx
				;--------------------------------------
					push	edx

					mov		edx, outputVal
					call	WriteString

					pop		edx
				ENDM

 00000000			.data

 00000000  0000000A [		user_input		DWORD	ARRAYSIZE DUP(0)
	    00000000
	   ]
 00000028 00000000		sum_input		DWORD	?
 0000002C  0000000C [		buffer			BYTE	12 DUP(0)
	    00
	   ]
 00000038 00			input_size		BYTE	?
 00000039 50 52 4F 47 52	program_title	BYTE	\
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 00
				"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 13, 10, 0
 00000078 57 72 69 74 74	program_auth	BYTE	"Written by: James Leflang", 13, 10, 0
	   65 6E 20 62 79
	   3A 20 4A 61 6D
	   65 73 20 4C 65
	   66 6C 61 6E 67
	   0D 0A 00
 00000094 50 6C 65 61 73	program_instr1	BYTE	"Please provide 10 signed decimal integers.", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 000000BF 45 61 63 68 20	program_instr2	BYTE	\
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 00
				"Each number needs to be small enough to fit inside a 32 bit register.", 0
 00000105 41 66 74 65 72	program_instr3	BYTE	\
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 00
				"After you have finished inputting the raw numbers I will display a list", 0
 0000014D 6F 66 20 74 68	program_instr4	BYTE	"of the integers, their sum, and their average value.",0
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 00
 00000182 50 6C 65 61 73	program_prompt	BYTE	"Please enter an signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 000001A2 45 52 52 4F 52	program_inperr	BYTE	\
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
				"ERROR: You did not enter a signed number or your number was too big.",13,10,0
 000001E9 50 6C 65 61 73	program_retry	BYTE	"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001FC 59 6F 75 20 65	program_disp1	BYTE	"You entered the following numbers:", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 00000221 54 68 65 20 73	program_disp2	BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 0000023F 54 68 65 20 72	program_disp3	BYTE	"The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000258 54 68 61 6E 6B	program_goodbye	BYTE	"Thanks for playing!", 13, 10, 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 0D
	   0A 00


 00000000			.code
 00000000			main PROC

 00000000  BA 00000039 R		mov		edx, OFFSET program_title
 00000005  E8 00000000 E		call	WriteString

 0000000A  BA 00000078 R		mov		edx, OFFSET program_auth
 0000000F  E8 00000000 E		call	WriteString

 00000014  E8 00000000 E		call	CrLf

 00000019  68 0000014D R		push	OFFSET program_instr4
 0000001E  68 00000105 R		push	OFFSET program_instr3
 00000023  68 000000BF R		push	OFFSET program_instr2
 00000028  68 00000094 R		push	OFFSET program_instr1
 0000002D  E8 00000096			call	Instruct

 00000032  E8 00000000 E		call	CrLf

 00000037  6A 0C			push	SIZEOF buffer
 00000039  68 00000038 R		push	OFFSET input_size
 0000003E  68 0000002C R		push	OFFSET buffer
 00000043  68 000001A2 R		push	OFFSET program_inperr
 00000048  68 00000182 R		push	OFFSET program_prompt
 0000004D  6A 28			push	SIZEOF user_input
 0000004F  68 00000000 R		push	OFFSET user_input
 00000054  E8 00000091			call	ReadVal

 00000059  BA 000001FC R		mov		edx, OFFSET program_disp1
 0000005E  E8 00000000 E		call	WriteString
 00000063  E8 00000000 E		call	CrLf

 00000068  6A 0C			push	LENGTHOF buffer
 0000006A  68 0000002C R		push	OFFSET buffer
 0000006F  6A 0A			push	ARRAYSIZE
 00000071  68 00000000 R		push	OFFSET user_input
 00000076  E8 00000111			call	WriteVal

 0000007B  BA 00000221 R		mov		edx, OFFSET program_disp2
 00000080  E8 00000000 E		call	WriteString

 00000085  68 00000028 R		push	OFFSET sum_input
 0000008A  6A 0A			push	ARRAYSIZE
 0000008C  68 00000000 R		push	OFFSET user_input
 00000091  E8 0000016E			call	Sum

 00000096  E8 00000000 E		call	CrLf

 0000009B  BA 0000023F R		mov		edx, OFFSET program_disp3
 000000A0  E8 00000000 E		call	WriteString

 000000A5  6A 0A			push	ARRAYSIZE
 000000A7  FF 35 00000028 R		push	sum_input
 000000AD  E8 0000016C			call	Avg

 000000B2  E8 00000000 E		call	CrLf

 000000B7  BA 00000258 R		mov		edx, OFFSET program_goodbye
 000000BC  E8 00000000 E		call	WriteString

					exit	; exit to operating system
 000000C1  6A 00	   *	    push   +000000000h
 000000C3  E8 00000000 E   *	    call   ExitProcess
 000000C8			main ENDP

				;--------------------------------------
 000000C8			Instruct PROC
				; Give instructions to the user program and detail the functions.
				; Preconditions: All strings must be on the stack
				; Postconditions: None
				; Stack State:
				;	old ebp		ebp
				;	ret @		ebp+4
				;	instr1		ebp+8
				;	instr2		ebp+12
				;	instr3		ebp+16
				;	instr4		ebp+20
				; Registers Changed: esi, ecx, edx
				; Returns: None
				;--------------------------------------

 000000C8  55				push	ebp
 000000C9  8B EC			mov		ebp, esp

 000000CB  B9 00000004			mov		ecx, 4
 000000D0  8B F5			mov		esi, ebp
 000000D2  83 C6 08			add		esi, 8

 000000D5  8B 16		L1:	mov		edx, [esi]
 000000D7  E8 00000000 E		call	WriteString
 000000DC  E8 00000000 E		call	CrLf

 000000E1  83 C6 04			add		esi, 4
					
 000000E4  E2 EF			loop	L1

 000000E6  5D				pop		ebp
 000000E7  C2 0010			ret		16
 000000EA			Instruct ENDP

				;--------------------------------------
 000000EA			ReadVal PROC
				; Read and validate the user input using getString macro.
				; Preconditions: The input array address and length must be on the stack.
				; Postconditions: Stack is clean and buffer+input_size are sanitized.
				; Stack State:
				;	old ebp		ebp
				;	ret @		ebp+4
				;	input @		ebp+8
				;	input size	ebp+12
				;	prompt		ebp+16
				;	error		ebp+20
				;	buffer @	ebp+24
				;	input_size	ebp+28
				;	buffer size	ebp+32
				; Registers changed: eax, ebx, ecx, esi, edi
				; Returns: None
				;--------------------------------------

 000000EA  55				push	ebp
 000000EB  8B EC			mov		ebp, esp

 000000ED  8B 75 14			mov		esi, [ebp + 20]
 000000F0  8B 7D 08			mov		edi, [ebp + 8]

 000000F3			Input:
					; Check if we are finished
 000000F3  8B 45 0C			mov		eax, [ebp + 12]
 000000F6  03 45 08			add		eax, [ebp + 8]
 000000F9  3B F8			cmp		edi, eax
 000000FB  7F 75			jg		Finish

					; Get the user input
					getString esi, [ebp + 32], [ebp + 28], [ebp + 16]
 000000FD  52		     1		push	edx
 000000FE  51		     1		push	ecx
 000000FF  50		     1		push	eax
 00000100  8B 55 10	     1		mov		edx, [ebp + 16]
 00000103  E8 00000000 E     1		call	WriteString
 00000108  8B D6	     1		mov		edx, esi
 0000010A  8B 4D 20	     1		mov		ecx, [ebp + 32]
 0000010D  E8 00000000 E     1		call	ReadString
 00000112  89 45 1C	     1		mov		[[ebp + 28]], eax
 00000115  58		     1		pop		eax
 00000116  59		     1		pop		ecx
 00000117  5A		     1		pop		edx

					; Setup to process the input
 00000118  33 C0			xor		eax, eax
 0000011A  33 DB			xor		ebx, ebx
 0000011C  B3 01			mov		bl, 1

					; Prepare the loop
 0000011E  FC				cld
 0000011F  8B 4D 1C			mov		ecx, [ebp + 28]

 00000122			L1:			; LOOP: For each char in the string
					; load the last value
 00000122  AC				lodsb

					; Skip the null
 00000123  3C 00			cmp		al, 0
 00000125  74 FB			je		L1

					; Check for a negative sign
 00000127  3C 2D			cmp		al, 45
 00000129  75 13			jne		Cont

					; if there is a plus sign, still valid but need go to next
 0000012B  3C 2B			cmp		al, 43
 0000012D  74 08			je		Next

					; Two's compliment
 0000012F  8B 07			mov		eax, [edi]
 00000131  83 F0 00			xor		eax, 0
 00000134  83 C0 01			add		eax, 1

 00000137			Next:		; Store the value and we are ready for the next input
 00000137  89 07			mov		[edi], eax
 00000139  83 C7 04			add		edi, 4
 0000013C  EB B5			jmp		Input

 0000013E			Cont:		; Check to make sure the input is an integer value
 0000013E  3C 30			cmp		al, 48
 00000140  7C 21			jl		Inval

 00000142  3C 39			cmp		al, 57
 00000144  7F 1D			jg		Inval

					; Store it
 00000146  2C 30			sub		al, 48
 00000148  F6 E3			mul		bl
 0000014A  8B 17			mov		edx, [edi]
 0000014C  03 D0			add		edx, eax
 0000014E  89 17			mov		[edi], edx

					; 10 times the current multiplier
 00000150  8A E0			mov		ah, al
 00000152  8A C3			mov		al, bl
 00000154  B3 0A			mov		bl, 10
 00000156  F6 E3			mul		bl
 00000158  8A D8			mov		bl, al
 0000015A  8A C4			mov		al, ah

					; loop until the current input is transfered
 0000015C  E2 C4			loop	L1

					; Go to the next number in the array
 0000015E  83 C7 04			add		edi, 4
 00000161  EB 90			jmp		Input

 00000163			Inval:		; Invalid input
 00000163  8B 55 14			mov		edx, [ebp + 20]
 00000166  E8 00000000 E		call	WriteString

 0000016B  E8 00000000 E		call	CrLf
 00000170  EB 81			jmp		Input

 00000172			Finish:
					; Sanitize the buffer and input_size
 00000172  8B 7D 18			mov		edi, [ebp + 24]
 00000175  8B 4D 20			mov		ecx, [ebp + 32]

 00000178  C6 07 00		L2:	mov		BYTE PTR [edi], 0
 0000017B  83 C7 01			add		edi, 1

 0000017E  E2 F8			loop	L2

 00000180  8B 75 1C			mov		esi, [ebp + 28]
 00000183  BE 00000000			mov		esi, 0

 00000188  5D				pop		ebp
 00000189  C2 001C			ret		28
 0000018C			ReadVal ENDP

				;--------------------------------------
 0000018C			WriteVal PROC
				LOCAL	sign_flag:BYTE
				; Output the user input using the WriteVal macro.
				; Preconditions: The input array address and length must be on the stack.
				; Postconditions: Stack is clean
				; Stack State:
				;	old ebp		ebp
				;	ret @		ebp+4
				;	input @		ebp+8
				;	input len	ebp+12
				;	buffer @	ebp+16
				;	buffer len	ebp+20
				; Registers changed: eax, ebx, ecx, esi, edi
				; Returns: None
				;--------------------------------------

 0000018C  55		   *	    push   ebp
 0000018D  8B EC	   *	    mov    ebp, esp
 0000018F  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000192  55				push	ebp
 00000193  8B EC			mov		ebp, esp

 00000195  8B 4D 0C			mov		ecx, [ebp + 12]
 00000198  8B 75 08			mov		esi, [ebp + 8]
 0000019B  8B 7D 10			mov		edi, [ebp + 16]
 0000019E  03 7D 14			add		edi, [ebp + 20]
 000001A1  83 EF 01			sub		edi, 1

 000001A4			L1:
 000001A4  33 C0			xor		eax, eax
 000001A6  C6 45 FF 00			mov		sign_flag, 0
 000001AA  8B 1E			mov		ebx, [esi]

 000001AC  F7 C3 00000000		test	ebx, 0
 000001B2  79 09			jns		isPos

 000001B4  33 DB			xor		ebx, ebx
 000001B6  83 C3 01			add		ebx, 1

 000001B9  C6 45 FF 01			mov		sign_flag, 1

 000001BD			isPos:
 000001BD  8B C3			mov		eax, ebx
 000001BF  BB 0000000A			mov		ebx, 10
 000001C4  99				cdq

 000001C5  F7 F3			div		ebx
 000001C7  83 C2 30			add		edx, 48

 000001CA  88 17			mov		BYTE PTR [edi], dl
 000001CC  83 C7 01			add		edi, 1

 000001CF  83 F8 00			cmp		eax, 0
 000001D2  74 12			jz		AddNegSign

 000001D4  50				push	eax
 000001D5  8B C3			mov		eax, ebx
 000001D7  BB 0000000A			mov		ebx, 10
 000001DC  F7 E3			mul		ebx
 000001DE  8B D8			mov		ebx, eax
 000001E0  58				pop		eax

 000001E1  3B 7D 10			cmp		edi, [ebp + 16]
 000001E4  7F D7			jg		isPos

 000001E6			AddNegSign:
 000001E6  80 7D FF 01			cmp		sign_flag, 1
 000001EA  75 03			jnz		Write

 000001EC  C6 07 2D			mov		BYTE PTR [edi], 45

 000001EF			Write:
 000001EF  8B 7D 10			mov		edi, [ebp + 16]

					displayString edi
 000001F2  52		     1		push	edx
 000001F3  8B D7	     1		mov		edx, edi
 000001F5  E8 00000000 E     1		call	WriteString
 000001FA  5A		     1		pop		edx

 000001FB  83 C6 04			add		esi, 4
 000001FE  E2 A4			loop	L1


 00000200  C9		   *	    leave  
 00000201  C2 000C			ret		12
 00000204			WriteVal ENDP

				;--------------------------------------
 00000204			Sum PROC
				; Sum the numbers and display the sum.
				; Preconditions: The input array address and length must be on the stack.
				; Postconditions: Stack is clean
				; Stack State:
				;	old ebp		ebp
				;	ret @		ebp+4
				;	input @		ebp+8
				;	input len	ebp+12
				;	sum @		ebp+16
				; Registers changed: eax, ebx, ecx, esi, edi
				; Returns: None
				;--------------------------------------

 00000204  55				push	ebp
 00000205  8B EC			mov		ebp, esp

 00000207  33 C0			xor		eax, eax

 00000209  8B 4D 0C			mov		ecx, [ebp + 12]
 0000020C  8B 75 08			mov		esi, [ebp + 8]
 0000020F  8B 7D 10			mov		edi, [ebp + 16]

 00000212			L1:
 00000212  8B 1E			mov		ebx, [esi]
 00000214  03 C3			add		eax, ebx

 00000216  E2 FA			loop	L1

 00000218  89 07			mov		[edi], eax

					;displayString edi

 0000021A  5D				pop		ebp
 0000021B  C2 000C			ret		12
 0000021E			Sum ENDP

				;--------------------------------------
 0000021E			Avg PROC
				;
				;--------------------------------------



 0000021E  C3				ret
 0000021F			Avg ENDP

				END main
Microsoft (R) Macro Assembler Version 14.26.28805.0	    05/31/20 23:15:25
-Portfolio Project     (program6_leflangj.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000026E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000021F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Avg  . . . . . . . . . . . . . .	P Near	 0000021E _TEXT	Length= 00000001 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Instruct . . . . . . . . . . . .	P Near	 000000C8 _TEXT	Length= 00000022 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000D5 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000EA _TEXT	Length= 000000A2 Public STDCALL
  Input  . . . . . . . . . . . .	L Near	 000000F3 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000122 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000137 _TEXT	
  Cont . . . . . . . . . . . . .	L Near	 0000013E _TEXT	
  Inval  . . . . . . . . . . . .	L Near	 00000163 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000172 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000178 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sum  . . . . . . . . . . . . . .	P Near	 00000204 _TEXT	Length= 0000001A Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000212 _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000018C _TEXT	Length= 00000078 Public STDCALL
  sign_flag  . . . . . . . . . .	Byte	 bp - 00000001
  L1 . . . . . . . . . . . . . .	L Near	 000001A4 _TEXT	
  isPos  . . . . . . . . . . . .	L Near	 000001BD _TEXT	
  AddNegSign . . . . . . . . . .	L Near	 000001E6 _TEXT	
  Write  . . . . . . . . . . . .	L Near	 000001EF _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C8 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000002C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input_size . . . . . . . . . . .	Byte	 00000038 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
program_auth . . . . . . . . . .	Byte	 00000078 _DATA	
program_disp1  . . . . . . . . .	Byte	 000001FC _DATA	
program_disp2  . . . . . . . . .	Byte	 00000221 _DATA	
program_disp3  . . . . . . . . .	Byte	 0000023F _DATA	
program_goodbye  . . . . . . . .	Byte	 00000258 _DATA	
program_inperr . . . . . . . . .	Byte	 000001A2 _DATA	
program_instr1 . . . . . . . . .	Byte	 00000094 _DATA	
program_instr2 . . . . . . . . .	Byte	 000000BF _DATA	
program_instr3 . . . . . . . . .	Byte	 00000105 _DATA	
program_instr4 . . . . . . . . .	Byte	 0000014D _DATA	
program_prompt . . . . . . . . .	Byte	 00000182 _DATA	
program_retry  . . . . . . . . .	Byte	 000001E9 _DATA	
program_title  . . . . . . . . .	Byte	 00000039 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_input  . . . . . . . . . . .	DWord	 00000028 _DATA	
user_input . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
