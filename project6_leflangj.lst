Microsoft (R) Macro Assembler Version 14.26.28806.0	    06/05/20 10:21:46
-Portfolio Project     (program6_leflangj.asm		     Page 1 - 1


				TITLE Portfolio Project     (program6_leflangj.asm)

				; Author: James Leflang
				; Last Modified: 05/30/2020
				; OSU email address: leflangj@oregonstate.edu
				; Course number/section: CS-271-400
				; Project Number: 6               Due Date: 06/07/2020
				; Description: This program takes the 10 signed integers as input from the user
				;	and manually translates the ASCII to integers and outputs the integers' sum
				;	and average as ASCII.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			ARRAYSIZE EQU 10

				;--------------------------------------
				getString MACRO bufferaddr, buffertyp, bufsize, prompt
				; Gets an input string to return the input in buffer.
				; Avoid passing arguments in edx, ecx, eax.
				;--------------------------------------
					push	edx
					push	ecx
					push	eax

					mov		edx, prompt
					call	WriteString

					mov		edx, bufferaddr
					mov		ecx, buffertyp
					call	ReadString

					mov		[bufsize], eax

					pop		eax
					pop		ecx
					pop		edx

				ENDM

				;--------------------------------------
				displayString MACRO outputVal
				; Takes a value and outputs it as a string to console.
				; Avoid passing arguements in edx
				;--------------------------------------
					push	edx

					mov		edx, outputVal
					call	WriteString

					pop		edx
				ENDM

 00000000			.data

 00000000  0000000A [		user_input		DWORD	ARRAYSIZE DUP(0)
	    00000000
	   ]
 00000028 00000000		sum_input		DWORD	?
 0000002C  00000040 [		buffer			BYTE	64 DUP(0)
	    00
	   ]
 0000006C 00			input_size		BYTE	?
 0000006D 50 52 4F 47 52	program_title	BYTE	\
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 00
				"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 13, 10, 0
 000000AC 57 72 69 74 74	program_auth	BYTE	"Written by: James Leflang", 13, 10, 0
	   65 6E 20 62 79
	   3A 20 4A 61 6D
	   65 73 20 4C 65
	   66 6C 61 6E 67
	   0D 0A 00
 000000C8 50 6C 65 61 73	program_instr1	BYTE	"Please provide 10 signed decimal integers.", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 000000F3 45 61 63 68 20	program_instr2	BYTE	\
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 00
				"Each number needs to be small enough to fit inside a 32 bit register.", 0
 00000139 41 66 74 65 72	program_instr3	BYTE	\
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 00
				"After you have finished inputting the raw numbers I will display a list", 0
 00000181 6F 66 20 74 68	program_instr4	BYTE	"of the integers, their sum, and their average value.",0
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 00
 000001B6 50 6C 65 61 73	program_prompt	BYTE	"Please enter an signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 000001D6 45 52 52 4F 52	program_inperr	BYTE	\
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
				"ERROR: You did not enter a signed number or your number was too big.",13,10,0
 0000021D 50 6C 65 61 73	program_retry	BYTE	"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000230 59 6F 75 20 65	program_disp1	BYTE	"You entered the following numbers:", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 00000255 54 68 65 20 73	program_disp2	BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000273 54 68 65 20 72	program_disp3	BYTE	"The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 0000028C 54 68 61 6E 6B	program_goodbye	BYTE	"Thanks for playing!", 13, 10, 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 0D
	   0A 00
 000002A2 20 20 00		program_space	BYTE	"  ", 0


 00000000			.code
 00000000			main PROC

 00000000  BA 0000006D R		mov		edx, OFFSET program_title
 00000005  E8 00000000 E		call	WriteString

 0000000A  BA 000000AC R		mov		edx, OFFSET program_auth
 0000000F  E8 00000000 E		call	WriteString

 00000014  E8 00000000 E		call	CrLf

 00000019  68 00000181 R		push	OFFSET program_instr4
 0000001E  68 00000139 R		push	OFFSET program_instr3
 00000023  68 000000F3 R		push	OFFSET program_instr2
 00000028  68 000000C8 R		push	OFFSET program_instr1
 0000002D  E8 000000B3			call	Instruct

 00000032  E8 00000000 E		call	CrLf

 00000037  6A 40			push	LENGTHOF buffer
 00000039  68 0000006C R		push	OFFSET input_size
 0000003E  68 0000002C R		push	OFFSET buffer
 00000043  68 000001D6 R		push	OFFSET program_inperr
 00000048  68 000001B6 R		push	OFFSET program_prompt
 0000004D  6A 28			push	SIZEOF user_input
 0000004F  68 00000000 R		push	OFFSET user_input
 00000054  E8 000000AE			call	ReadVal

 00000059  E8 00000000 E		call	CrLf

 0000005E  BA 00000230 R		mov		edx, OFFSET program_disp1
 00000063  E8 00000000 E		call	WriteString

 00000068  6A 40			push	LENGTHOF buffer
 0000006A  68 000002A2 R		push	OFFSET program_space
 0000006F  68 0000002C R		push	OFFSET buffer
 00000074  6A 0A			push	ARRAYSIZE
 00000076  68 00000000 R		push	OFFSET user_input
 0000007B  E8 000001D8			call	ArrayOut

 00000080  E8 00000000 E		call	CrLf
 00000085  E8 00000000 E		call	CrLf

 0000008A  BA 00000255 R		mov		edx, OFFSET program_disp2
 0000008F  E8 00000000 E		call	WriteString

 00000094  6A 40			push	LENGTHOF buffer
 00000096  68 0000002C R		push	OFFSET buffer
 0000009B  68 00000028 R		push	OFFSET sum_input
 000000A0  6A 0A			push	ARRAYSIZE
 000000A2  68 00000000 R		push	OFFSET user_input
 000000A7  E8 000001ED			call	Sum

 000000AC  E8 00000000 E		call	CrLf

 000000B1  BA 00000273 R		mov		edx, OFFSET program_disp3
 000000B6  E8 00000000 E		call	WriteString

 000000BB  6A 40			push	LENGTHOF buffer
 000000BD  68 0000002C R		push	OFFSET buffer
 000000C2  FF 35 00000028 R		push	sum_input
 000000C8  6A 0A			push	ARRAYSIZE
 000000CA  E8 0000020C			call	Avg

 000000CF  E8 00000000 E		call	CrLf

 000000D4  BA 0000028C R		mov		edx, OFFSET program_goodbye
 000000D9  E8 00000000 E		call	WriteString

					exit	; exit to operating system
 000000DE  6A 00	   *	    push   +000000000h
 000000E0  E8 00000000 E   *	    call   ExitProcess
 000000E5			main ENDP

				;--------------------------------------
 000000E5			Instruct PROC
				; Give instructions to the user program and detail the functions.
				; Preconditions: All strings must be on the stack
				; Postconditions: None
				; Stack State:
				;	old ebp		ebp
				;	ret @		ebp+4
				;	instr1		ebp+8
				;	instr2		ebp+12
				;	instr3		ebp+16
				;	instr4		ebp+20
				; Registers Changed: esi, ecx, edx
				; Returns: None
				;--------------------------------------

 000000E5  55				push	ebp
 000000E6  8B EC			mov		ebp, esp

 000000E8  B9 00000004			mov		ecx, 4
 000000ED  8B F5			mov		esi, ebp
 000000EF  83 C6 08			add		esi, 8

 000000F2  8B 16		L1:	mov		edx, [esi]
 000000F4  E8 00000000 E		call	WriteString
 000000F9  E8 00000000 E		call	CrLf

 000000FE  83 C6 04			add		esi, 4
					
 00000101  E2 EF			loop	L1

 00000103  5D				pop		ebp
 00000104  C2 0010			ret		16
 00000107			Instruct ENDP

				;--------------------------------------
 00000107			ReadVal PROC
				LOCAL signFlag:BYTE
				; Read and validate the user input using getString macro.
				; Preconditions: The input array address and length must be on the stack.
				; Postconditions: Stack is clean and buffer+input_size are sanitized.
				; Stack State:
				;	signFlag	ebp-4
				;	old ebp		ebp
				;	ret @		ebp+4
				;	input @		ebp+8
				;	input size	ebp+12
				;	prompt		ebp+16
				;	error		ebp+20
				;	buffer @	ebp+24
				;	input_size	ebp+28
				;	buffer len	ebp+32
				; Registers changed: eax, ebx, ecx, esi, edi
				; Returns: None
				;--------------------------------------

 00000107  55		   *	    push   ebp
 00000108  8B EC	   *	    mov    ebp, esp
 0000010A  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000010D  8B 75 18			mov		esi, [ebp + 24]
 00000110  8B 7D 08			mov		edi, [ebp + 8]
 00000113  C6 45 FF 00			mov		signFlag, 0

 00000117			Input:
					; Check if we are finished
 00000117  8B 45 0C			mov		eax, [ebp + 12]
 0000011A  03 45 08			add		eax, [ebp + 8]
 0000011D  3B F8			cmp		edi, eax
 0000011F  0F 8D 000000BB		jge		Finish

					; Get the user input
					getString esi, [ebp + 32], [ebp + 28], [ebp + 16]
 00000125  52		     1		push	edx
 00000126  51		     1		push	ecx
 00000127  50		     1		push	eax
 00000128  8B 55 10	     1		mov		edx, [ebp + 16]
 0000012B  E8 00000000 E     1		call	WriteString
 00000130  8B D6	     1		mov		edx, esi
 00000132  8B 4D 20	     1		mov		ecx, [ebp + 32]
 00000135  E8 00000000 E     1		call	ReadString
 0000013A  89 45 1C	     1		mov		[[ebp + 28]], eax
 0000013D  58		     1		pop		eax
 0000013E  59		     1		pop		ecx
 0000013F  5A		     1		pop		edx

					; Setup to process the input
 00000140  33 C0			xor		eax, eax
 00000142  33 DB			xor		ebx, ebx
 00000144  66| B8 0001			mov		ax, 1

					; Prepare the loop
 00000148  FC				cld
 00000149  BB 00000001			mov		ebx, 1
 0000014E  8B 4D 1C			mov		ecx, [ebp + 28]
 00000151  83 E9 01			sub		ecx, 1
 00000154  83 F9 00			cmp		ecx, 0
 00000157  74 15			jz		L1

 00000159  83 F9 0B			cmp		ecx, 11
 0000015C  7F 70			jg		Inval

 0000015E  BB 0000000A			mov		ebx, 10

 00000163			Mut:
 00000163  F7 E3			mul		ebx
 00000165  E2 FC			loop	Mut

 00000167  8B D8			mov		ebx, eax
 00000169  8B 4D 1C			mov		ecx, [ebp + 28]

 0000016C  33 C0			xor		eax, eax

 0000016E			L1:			; LOOP: For each char in the string
					; load the last value
 0000016E  AC				lodsb

					; End at the null
 0000016F  3C 00			cmp		al, 0
 00000171  74 50			je		Next

					; if there is a plus sign, still valid but need go to next
 00000173  3C 2B			cmp		al, 43
 00000175  74 F7			je		L1
					
					; Check for a negative sign
 00000177  3C 2D			cmp		al, 45
 00000179  75 0E			jne		Cont

 0000017B  C6 45 FF 01			mov		signFlag, 1

					; Two's Complement
 0000017F  8B 07			mov		eax, [edi]
 00000181  83 F0 00			xor		eax, 0
 00000184  83 C0 01			add		eax, 1
 00000187  EB E5			jmp		L1

 00000189			Cont:		; Check to make sure the input is an integer value
 00000189  3C 30			cmp		al, 48
 0000018B  7C 41			jl		Inval

 0000018D  3C 39			cmp		al, 57
 0000018F  7F 3D			jg		Inval

					; Store it
 00000191  2C 30			sub		al, 48
 00000193  F7 E3			mul		ebx
 00000195  8B 17			mov		edx, [edi]
 00000197  03 C2			add		eax, edx

 00000199  80 7D FF 01			cmp		signFlag, 1
 0000019D  74 09			je		isNegative
					
 0000019F  3D 7FFFFFFF			cmp		eax, 7FFFFFFFh
 000001A4  70 28			jo		Inval
 000001A6  7E 07			jle		Val

 000001A8			isNegative:
 000001A8  3D 80000000			cmp		eax, 80000000h
 000001AD  70 1F			jo		Inval

 000001AF			Val:
 000001AF  89 07			mov		[edi], eax

 000001B1  33 D2			xor		edx, edx

					; Divide by 10
 000001B3  8B C3			mov		eax, ebx
 000001B5  BB 0000000A			mov		ebx, 10
 000001BA  99				cdq
 000001BB  F7 F3			div		ebx
 000001BD  8B D8			mov		ebx, eax

 000001BF  33 C0			xor		eax, eax

					; loop until the current input is transfered
 000001C1  E2 AB			loop	L1

 000001C3			Next:		; Go to the next number in the array
 000001C3  8B 75 18			mov		esi, [ebp + 24]
 000001C6  83 C7 04			add		edi, 4
 000001C9  E9 FFFFFF49			jmp		Input

 000001CE			Inval:		; Invalid input
 000001CE  8B 55 14			mov		edx, [ebp + 20]
 000001D1  E8 00000000 E		call	WriteString

 000001D6  E8 00000000 E		call	CrLf
 000001DB  E9 FFFFFF37			jmp		Input

 000001E0			Finish:
					; Sanitize the buffer and input_size
 000001E0  8B 7D 18			mov		edi, [ebp + 24]
 000001E3  8B 4D 20			mov		ecx, [ebp + 32]

 000001E6  C6 07 00		L2:	mov		BYTE PTR [edi], 0
 000001E9  83 C7 01			add		edi, 1

 000001EC  E2 F8			loop	L2

 000001EE  8B 75 1C			mov		esi, [ebp + 28]
 000001F1  BE 00000000			mov		esi, 0

 000001F6  C9		   *	    leave  
 000001F7  C2 001C			ret		28
 000001FA			ReadVal ENDP

				;--------------------------------------
 000001FA			WriteVal PROC
				LOCAL	curVal:DWORD
				; Subprocedure to convert signed integers to strings.
				; Preconditions: The buffer addr and the integer is on the stack.
				; Postconditions: The string is in the buffer.
				; Stack State:
				;	curVal		ebp-4
				;	old epb		ebp
				;	ret @		ebp+4
				;	int			ebp+8
				;	buffer @	ebp+12
				;	caller stk	ebp+16...
				; Registers changed: eax, ebx, edi
				; Returns: Converted string in the buffer.
				;--------------------------------------

					; Prepare to display
 000001FA  55		   *	    push   ebp
 000001FB  8B EC	   *	    mov    ebp, esp
 000001FD  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000200  8B 45 08			mov		eax, [ebp + 8]
 00000203  89 45 FC			mov		curVal, eax
 00000206  8B 7D 0C			mov		edi, [ebp + 12]

 00000209  FC				cld

					; Check if negative
 0000020A  A9 00000000			test	eax, 0
 0000020F  79 11			jns		isPos

					; Two's Complement
 00000211  33 C0			xor		eax, eax
 00000213  83 C0 01			add		eax, 1

					; Add a minus sign
 00000216  8B D8			mov		ebx, eax
 00000218  33 C0			xor		eax, eax
 0000021A  B0 2D			mov		al, 45
 0000021C  AA				stosb

 0000021D  8B C3			mov		eax, ebx
 0000021F  89 45 FC			mov		curVal, eax

 00000222			isPos:		; Just a positive number
					; Setup
 00000222  BB 0000000A			mov		ebx, 10
 00000227  83 F8 0A			cmp		eax, 10
 0000022A  7E 25			jle		OneDigit

 0000022C			L2:			; Divide by 10
 0000022C  99				cdq
 0000022D  F7 F3			div		ebx
 0000022F  83 F8 0A			cmp		eax, 10
 00000232  7C 10			jl		Accum

					; If the quotient is larger than 10,
					;	then go in multiples of 10 until less than 10
 00000234  8B C3			mov		eax, ebx
 00000236  BB 0000000A			mov		ebx, 10
 0000023B  F7 E3			mul		ebx
 0000023D  8B D8			mov		ebx, eax
 0000023F  8B 45 FC			mov		eax, curVal
 00000242  EB E8			jmp		L2

 00000244			Accum:		; Store the ASCII value
 00000244  04 30			add		al, 48
 00000246  AA				stosb

					; move the remainder
 00000247  8B C2			mov		eax, edx
 00000249  89 45 FC			mov		curVal, eax

					; If it is more than 10 then we continue
 0000024C  83 F8 0A			cmp		eax, 10
 0000024F  7D D1			jge		isPos

					; Only the one's place is left
 00000251			OneDigit:
 00000251  04 30			add		al, 48
 00000253  AA				stosb

 00000254  C9		   *	    leave  
 00000255  C2 0008			ret		8
 00000258			WriteVal ENDP

				;--------------------------------------
 00000258			ArrayOut PROC
				; Output the user input using the displayString macro.
				; Preconditions: The input array address and length must be on the stack.
				; Postconditions: Stack+buffer is clean
				; Stack State:
				;	old ebp		ebp
				;	ret @		ebp+4
				;	input @		ebp+8
				;	input len	ebp+12
				;	buffer @	ebp+16
				;	space		ebp+20
				;	buffer len	ebp+24
				; Registers changed: eax, ebx, ecx, edx, esi, edi
				; Returns: None
				;--------------------------------------

 00000258  55				push	ebp
 00000259  8B EC			mov		ebp, esp

					; Setup
 0000025B  8B 4D 0C			mov		ecx, [ebp + 12]
 0000025E  8B 75 08			mov		esi, [ebp + 8]
					
 00000261			L1:			; LOOP: for all numbers in the array
 00000261  8B 7D 10			mov		edi, [ebp + 16]
 00000264  8B 06			mov		eax, [esi]
					
 00000266  57				push	edi
 00000267  50				push	eax
 00000268  E8 FFFFFF8D			call	WriteVal

					; Write the value out
 0000026D  8B 7D 10			mov		edi, [ebp + 16]
					displayString edi
 00000270  52		     1		push	edx
 00000271  8B D7	     1		mov		edx, edi
 00000273  E8 00000000 E     1		call	WriteString
 00000278  5A		     1		pop		edx

 00000279  8B 55 14			mov		edx, [ebp + 20]
 0000027C  E8 00000000 E		call	WriteString

 00000281  8B 55 18			mov		edx, [ebp + 24]
 00000284  03 D7			add		edx, edi

 00000286			Clear:
 00000286  C6 07 00			mov		BYTE PTR [edi], 0
 00000289  83 C7 01			add		edi, 1

 0000028C  3B FA			cmp		edi, edx
 0000028E  7C F6			jl		Clear

					; Got to the next value in the array
 00000290  83 C6 04			add		esi, 4
 00000293  E2 CC			loop	L1

 00000295  5D				pop		ebp
 00000296  C2 0014			ret		20
 00000299			ArrayOut ENDP

				;--------------------------------------
 00000299			Sum PROC
				; Sum the numbers and display the sum.
				; Preconditions: The input array address and length must be on the stack.
				; Postconditions: Stack+buffer is clean
				; Stack State:
				;	old ebp		ebp
				;	ret @		ebp+4
				;	input @		ebp+8
				;	input len	ebp+12
				;	sum @		ebp+16
				;	buffer @	ebp+20
				;	buffer len	ebp+24
				; Registers changed: eax, ebx, ecx, edx, esi, edi
				; Returns: None
				;--------------------------------------

 00000299  55				push	ebp
 0000029A  8B EC			mov		ebp, esp

 0000029C  33 C0			xor		eax, eax

 0000029E  8B 4D 0C			mov		ecx, [ebp + 12]
 000002A1  8B 75 08			mov		esi, [ebp + 8]
 000002A4  8B 7D 10			mov		edi, [ebp + 16]

 000002A7			L1:			; Sum all the numbers
 000002A7  8B 1E			mov		ebx, [esi]
 000002A9  03 C3			add		eax, ebx
 000002AB  83 C6 04			add		esi, 4
 000002AE  E2 F7			loop	L1

 000002B0  89 07			mov		[edi], eax

 000002B2  8B 7D 14			mov		edi, [ebp + 20]

 000002B5  57				push	edi
 000002B6  50				push	eax
 000002B7  E8 FFFFFF3E			call	WriteVal

 000002BC  8B 7D 14			mov		edi, [ebp + 20]
					displayString edi
 000002BF  52		     1		push	edx
 000002C0  8B D7	     1		mov		edx, edi
 000002C2  E8 00000000 E     1		call	WriteString
 000002C7  5A		     1		pop		edx

 000002C8  8B 55 18			mov		edx, [ebp + 24]
 000002CB  03 D7			add		edx, edi

 000002CD			Clear:
 000002CD  C6 07 00			mov		BYTE PTR [edi], 0
 000002D0  83 C7 01			add		edi, 1

 000002D3  3B FA			cmp		edi, edx
 000002D5  7C F6			jl		Clear

 000002D7  5D				pop		ebp
 000002D8  C2 0014			ret		20
 000002DB			Sum ENDP

				;--------------------------------------
 000002DB			Avg PROC
				; Display the sum.
				; Preconditions: The sum and the array length must be on the stack.
				; Postconditions: Stack+buffer is clean
				; Stack State:
				;	old ebp		ebp
				;	ret @		ebp+4
				;	input len	ebp+8
				;	sum			ebp+12
				;	buffer @	ebp+16
				;	buffer len	ebp+20
				; Registers changed: eax, ebx, ecx, edx, esi, edi
				; Returns: None
				;--------------------------------------

 000002DB  55				push	ebp
 000002DC  8B EC			mov		ebp, esp
 000002DE  33 C0			xor		eax, eax

					; Grab the sum and the array length and divide
 000002E0  8B 5D 08			mov		ebx, [ebp + 8]
 000002E3  8B 45 0C			mov		eax, [ebp + 12]

 000002E6  99				cdq
 000002E7  F7 F3			div		ebx

 000002E9  8B 7D 10			mov		edi, [ebp + 16]

 000002EC  57				push	edi
 000002ED  50				push	eax
 000002EE  E8 FFFFFF07			call	WriteVal

 000002F3  8B 7D 10			mov		edi, [ebp + 16]
					displayString edi
 000002F6  52		     1		push	edx
 000002F7  8B D7	     1		mov		edx, edi
 000002F9  E8 00000000 E     1		call	WriteString
 000002FE  5A		     1		pop		edx

 000002FF  8B 55 14			mov		edx, [ebp + 20]
 00000302  03 D7			add		edx, edi

 00000304			Clear:
 00000304  C6 07 00			mov		BYTE PTR [edi], 0
 00000307  83 C7 01			add		edi, 1

 0000030A  3B FA			cmp		edi, edx
 0000030C  7C F6			jl		Clear

 0000030E  5D				pop		ebp
 0000030F  C2 0010			ret		16
 00000312			Avg ENDP

				END main
Microsoft (R) Macro Assembler Version 14.26.28806.0	    06/05/20 10:21:46
-Portfolio Project     (program6_leflangj.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002A5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000312 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayOut . . . . . . . . . . . .	P Near	 00000258 _TEXT	Length= 00000041 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000261 _TEXT	
  Clear  . . . . . . . . . . . .	L Near	 00000286 _TEXT	
Avg  . . . . . . . . . . . . . .	P Near	 000002DB _TEXT	Length= 00000037 Public STDCALL
  Clear  . . . . . . . . . . . .	L Near	 00000304 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Instruct . . . . . . . . . . . .	P Near	 000000E5 _TEXT	Length= 00000022 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000F2 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000107 _TEXT	Length= 000000F3 Public STDCALL
  signFlag . . . . . . . . . . .	Byte	 bp - 00000001
  Input  . . . . . . . . . . . .	L Near	 00000117 _TEXT	
  Mut  . . . . . . . . . . . . .	L Near	 00000163 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000016E _TEXT	
  Cont . . . . . . . . . . . . .	L Near	 00000189 _TEXT	
  isNegative . . . . . . . . . .	L Near	 000001A8 _TEXT	
  Val  . . . . . . . . . . . . .	L Near	 000001AF _TEXT	
  Next . . . . . . . . . . . . .	L Near	 000001C3 _TEXT	
  Inval  . . . . . . . . . . . .	L Near	 000001CE _TEXT	
  Finish . . . . . . . . . . . .	L Near	 000001E0 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001E6 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sum  . . . . . . . . . . . . . .	P Near	 00000299 _TEXT	Length= 00000042 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002A7 _TEXT	
  Clear  . . . . . . . . . . . .	L Near	 000002CD _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001FA _TEXT	Length= 0000005E Public STDCALL
  curVal . . . . . . . . . . . .	DWord	 bp - 00000004
  isPos  . . . . . . . . . . . .	L Near	 00000222 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000022C _TEXT	
  Accum  . . . . . . . . . . . .	L Near	 00000244 _TEXT	
  OneDigit . . . . . . . . . . .	L Near	 00000251 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E5 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000002C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input_size . . . . . . . . . . .	Byte	 0000006C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
program_auth . . . . . . . . . .	Byte	 000000AC _DATA	
program_disp1  . . . . . . . . .	Byte	 00000230 _DATA	
program_disp2  . . . . . . . . .	Byte	 00000255 _DATA	
program_disp3  . . . . . . . . .	Byte	 00000273 _DATA	
program_goodbye  . . . . . . . .	Byte	 0000028C _DATA	
program_inperr . . . . . . . . .	Byte	 000001D6 _DATA	
program_instr1 . . . . . . . . .	Byte	 000000C8 _DATA	
program_instr2 . . . . . . . . .	Byte	 000000F3 _DATA	
program_instr3 . . . . . . . . .	Byte	 00000139 _DATA	
program_instr4 . . . . . . . . .	Byte	 00000181 _DATA	
program_prompt . . . . . . . . .	Byte	 000001B6 _DATA	
program_retry  . . . . . . . . .	Byte	 0000021D _DATA	
program_space  . . . . . . . . .	Byte	 000002A2 _DATA	
program_title  . . . . . . . . .	Byte	 0000006D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_input  . . . . . . . . . . .	DWord	 00000028 _DATA	
user_input . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
